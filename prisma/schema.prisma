// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    assignedTasks Task[]    @relation("AssignedTasks")
    createdTasks  Task[]    @relation("CreatedTasks")
    updatedTasks  Task[]    @relation("UpdatedTasks")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      Status   @default(INITIATED)
  priority    Priority @default(LOW)
  assignedTo  User     @relation(name: "AssignedTasks", fields: [assignId], references: [id])
  assignId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  createdBy   User     @relation(name: "CreatedTasks", fields: [createdById], references: [id])
  createdById String
  updatedBy   User     @relation(name: "UpdatedTasks", fields: [updatedById], references: [id])
  updatedById String
  deadline    DateTime

  @@index([id])
}

enum Status {
  INITIATED
  INPROGRESS
  COMPLETED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}
